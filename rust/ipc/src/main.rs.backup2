use std::sync::Arc;
use std::time::Duration;
//use std::process::{Command, Stdio};

use tokio::{join, task};
use tokio::io::{stdin, stdout};
use tokio::sync::Mutex;

use tokio::io::{AsyncRead, AsyncWrite, BufReader};
use tokio::io::{AsyncBufReadExt, AsyncReadExt, AsyncWriteExt};
use tokio::net::{UnixListener, UnixStream};

use structopt::StructOpt;
use Action::*;
use Mode::*;

#[derive(StructOpt, Debug)]
struct Arguments {
    /// Socket to use for IPC (either namespace that starts with "@" or a file)
    #[structopt(short = "s", long = "socket", default_value = "/tmp/ipc")]
    socket: String,

    #[structopt(subcommand)]
    action: Action
}

#[derive(StructOpt, Debug)]
enum Action {
    /// Forward data from stdin to socket or from socket to stdout.
    Forward {
        /// Whether to pass stdin to stdout or not, regardless of forwarding mode.
        #[structopt(short = "p", long = "passthrough")]
        passthrough: bool,

        #[structopt(subcommand)]
        mode: Mode,
    },

    /// Schedule a command to be run periodically or when a message is received on the given socket.
    Schedule {
        /// Regular interval to run command (in seconds). If not supplied, the command will only be run once at the start and then when a message appears on the socket.
        #[structopt(short = "i", long = "interval")]
        interval: Option<f64>,

        /// Command to run (encapsulate this as a string).
        command: String
    }
}

#[derive(StructOpt, Debug)]
enum Mode {
    /// Run in server mode (establishes the socket)
    Server,

    /// Run in client mode (connects to existing socket).
    Client
}

/*fn notify(args: &Arguments) {
    let mut conn = LocalSocketStream::connect(args.socket.clone())
            .expect("Unable to open socket");

    for line in stdin().lock().lines() {
        let mut line = line.expect("Unable to read from stdin");
        line.push('\n');
        
        conn.write_all(line.as_bytes()).expect("Unable to write to socket");
    }
}

fn schedule(args: &Arguments) {
    let listener = block_on(LocalSocketListener::bind(args.socket.clone()))
            .expect("Unable to open socket for listening");
    
    let server = listener.incoming().try_for_each(|conn| async move {
        use futures::stream::StreamExt;

        let mut cmd = match &args.action {
            Notify => panic!("This shouldn't happen"),
            Schedule { interval: _, command } => Command::new("/bin/bash")
                .arg("-c")
                .arg(command)
                .stdin(Stdio::piped())
                .spawn()
                .expect("Unable to run command")
        };

        let mut outstdin = cmd.stdin.take().expect("Unable to open stdin for command");

        let mut lines = BufReader::new(conn).lines();
        while let Some(line) = lines.next().await {
            let mut line = line.expect("Unable to read from socket connection");
            line.push('\n');

            // Only write if command is still running
            if let Ok(None) = cmd.try_wait() {
                outstdin.write_all(line.as_bytes()).expect("Unable to write to stdin for command");
            }
        }

        Ok(())
    });

    block_on(server).expect("Unable to start server listener loop");
}*/

type StreamVec = Vec<Box<dyn AsyncWrite + Unpin + Send>>;

async fn forward<I: AsyncRead + Unpin>(input: I, output: Arc<Mutex<StreamVec>>) {
    let mut lines = BufReader::new(input).lines();
    while let Some(mut line) = lines.next_line().await.expect("Unable to read from socket") {
        line.push('\n');

        let mut output = output.lock().await;

        let mut i = 0;
        while i < output.len() {
            match output[i].write_all(line.as_bytes()).await {
                Ok(_) => i += 1,
                _ => { output.remove(i); }
            }
        }
    }
}

async fn listen(socket: String, output: Arc<Mutex<StreamVec>>) {
    let listener = UnixListener::bind(socket).expect("Unable to create socket");

    loop {
        match listener.accept().await {
            Ok((stream, _addr)) => {
                let (mut stream_in, stream_out) = stream.into_split();
        
                {
                    let mut output = output.lock().await;
                    output.push(Box::new(stream_out));
                }

                task::spawn(async move {
                    /*println!("asd");
                    let mut lines = BufReader::new(conn_in).lines();
                    while let Some(line) = lines.next().await {
                        let mut line = line.expect("Unable to read from socket connection");
                        line.push('\n');

                        stdout().write_all(line.as_bytes()).await.expect("Unable to write to stdout");
                    }*/
                    tokio::io::copy(&mut stream_in, &mut stdout()).await.expect("Nahhhh");
                });
            },
            Err(e) => eprintln!("Unable to establish client connection: {}", e)
        }
    }
}

async fn server(socket: String, passthrough: bool) {
    let _ = std::fs::remove_file(&socket);
    
    let mut output: StreamVec = Vec::new();
    if passthrough {
        output.push(Box::new(stdout()));
    }

    let output = Arc::new(Mutex::new(output));

    let forwarder = forward(stdin(), output.clone());
    let listener = listen(socket.clone(), output);
    
    join!(forwarder, listener);

    let _ = std::fs::remove_file(&socket);
}

async fn connect(socket: String, output: StreamVec) {
    let mut output = output;
    let stream = UnixStream::connect(socket).await.expect("Unable to open socket");

    let (stream_in, stream_out) = stream.into_split();

    output.push(Box::new(stream_out));

    let t = task::spawn(async move {
        let mut input = BufReader::new(stdin());
        let mut line = String::new();
        while let Ok(len) = input.read_line(&mut line).await {
            if len == 0 {
                break;
            }

            for out in output.iter_mut() {
                out.write_all(line.as_bytes()).await.expect("Unable to write to output");
            }
            line.clear();
        }

        /*let mut lines = BufReader::new(stdin()).lines();
        while let Some(mut line) = lines.next_line().await.expect("Unable to read from socket") {
            line.push('\n');
    
            for out in output.iter_mut() {
                out.write_all(line.as_bytes()).await.expect("Unable to write to output");
            }
        }*/
    });

    //tokio::io::copy(&mut stream_in, &mut stdout()).await.expect("Nahhhh");
    /*let mut lines = BufReader::new(stream_in).lines();
    while let Some(mut line) = lines.next_line().await.expect("Unable to read from socket connection") {
        println!("Len: {}", line.len());
        line.push('\n');

        stdout().write_all(line.as_bytes()).await.expect("Unable to write to stdout");
    }*/

    let mut input = BufReader::new(stream_in);
    let mut line = String::new();
    while let Ok(len) = input.read_line(&mut line).await {
        if len == 0 {
            break;
        }

        stdout().write_all(line.as_bytes()).await.expect("Unable to write to stdout");
        line.clear();
    }

    // We only reach this point if the above loop breaks (meaning the connection has been broken)
    t.abort();
    //let _ = t.await;
}

async fn client(socket: String, passthrough: bool) {
    let mut output: StreamVec = Vec::new();
    if passthrough {
        output.push(Box::new(stdout()));
    }

    connect(socket, output).await;
}

async fn test1() {
    use async_std::io::{stdin};
    use futures::{AsyncBufReadExt, StreamExt};
    use futures::future::{Abortable, AbortHandle, AbortRegistration};

    let (abort_handle, abort_registration) = AbortHandle::new_pair();

    let t = async_std::task::spawn(Abortable::new(async {
        let mut lines = async_std::io::BufReader::new(stdin()).lines();
        while let Some(line) = lines.next().await {
            let line = line.unwrap();

            println!("Line: {}", line);
        }
    }, abort_registration));

    async_std::task::sleep(std::time::Duration::from_secs(1)).await;

    abort_handle.abort();

    println!("Forcefully aborted");
}

async fn test2() {
    let t = tokio::task::spawn(async {
        let mut lines = tokio::io::BufReader::new(stdin()).lines();
        while let Some(line) = lines.next_line().await.unwrap() {
            println!("Line: {}", line);
        }
    });

    tokio::time::sleep(std::time::Duration::from_secs(1)).await;

    t.abort();

    println!("Forcefully aborted");
}

#[tokio::main]
async fn main() {
    /*let args = Arguments::from_args();

    match &args.action {
        Forward { passthrough, mode } => {
            match mode {
                Server => server(args.socket, *passthrough).await,
                Client => client(args.socket, *passthrough).await
            }
        },
        Schedule { interval, command } => todo!()
    }*/

    //futures::executor::block_on(test1());
    test2().await;
}
