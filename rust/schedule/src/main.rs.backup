use std::ffi::OsStr;
use std::io::Write;
//use std::os::unix::prelude::AsRawFd;
use std::process::{Child, Command, Stdio};
use std::sync::Arc;
use std::time::Duration;
use std::os::unix::io::{AsRawFd, FromRawFd, RawFd};
use std::os::unix::net::UnixStream;

use futures::AsyncWrite;
use futures::{StreamExt, join};

use async_std::io::{BufReader, stdin};
use async_std::io::prelude::BufReadExt;
use async_std::sync::Mutex;
use async_std::task::{spawn, sleep};

use async_compat::{Compat, CompatExt};

//use tokio::net::UnixStream;

use structopt::StructOpt;

#[derive(StructOpt, Debug)]
struct CLI {
    /// Interval at which to run the command (in seconds). If not supplied, the command will only be run once at the beginning and once more each time a line of input is read from stdin.
    #[structopt(short = "i", long = "interval")]
    interval: Option<f64>,

    /// Arguments to pass to the command.
    #[structopt(subcommand)]
    command: SubCommand
}

#[derive(StructOpt, Debug)]
enum SubCommand {
    /// Command to run with its arguments.
    #[structopt(external_subcommand)]
    Sub(Vec<String>)
}

impl SubCommand {
    #[allow(dead_code)]
    fn get(self) -> Vec<String> {
        match self {
            SubCommand::Sub(v) => v
        }
    }

    fn as_ref(&self) -> &Vec<String> {
        match self {
            SubCommand::Sub(v) => v
        }
    }

    #[allow(dead_code)]
    fn as_mut(&mut self) -> &Vec<String> {
        match self {
            SubCommand::Sub(v) => v
        }
    }
}

struct ChildData {
    proc: Option<Child>,
    input: UnixStream
}

async fn run(command: &[impl AsRef<OsStr>], data: Arc<Mutex<ChildData>>) {
    let mut data = data.lock().await;
    
    if let Some(child) = &mut data.proc {
        match child.try_wait() {
            Ok(Some(_)) => {
                // Existing child process has already exited
                data.proc = Some(Command::new(command[0].as_ref())
                    .args(command.iter().skip(1))
                    .stdin(unsafe { Stdio::from_raw_fd(data.input.try_clone().unwrap().as_raw_fd()) })
                    .spawn()
                    .expect("Unable to spawn child process"));
            },
            _ => {
                // Existing child process can't give status code, must still be running.
                //*child = None;
            }
        }
    } else {
        data.proc = Some(Command::new(command[0].as_ref())
            .args(command.iter().skip(1))
            .stdin(unsafe { Stdio::from_raw_fd(data.input.try_clone().unwrap().as_raw_fd()) })
            .spawn()
            .expect("Unable to spawn child process"));
    }

    /*child.as_mut().unwrap().stdin.take().unwrap()
        .write_all(input.as_ref().as_bytes())
        .expect("Unable to write to child process's stdin");*/
}

async fn timer_loop(cli: &CLI, data: Arc<Mutex<ChildData>>) {
    loop {
        run(cli.command.as_ref(), data.clone()).await;

        match cli.interval {
            Some(interval) => sleep(Duration::from_secs_f64(interval)).await,
            None => break // No interval means only run once at beginning and then for input
        }
    }
}

async fn read_write_loop(cli: &CLI, data: Arc<Mutex<ChildData>>, output: UnixStream) {
    let mut output = output;
    let mut lines = BufReader::new(stdin()).lines();
    while let Some(line) = lines.next().await {
        let mut line = line.expect("Unable to read from stdin");
        line.push('\n');

        run(cli.command.as_ref(), data.clone()).await;

        async { output.write_all(line.as_bytes()) }.await.expect("Unable to write to pipe");
    }
}

#[async_std::main]
async fn main() {
    let cli = CLI::from_args();

    let (input, output) = UnixStream::pair()
        .expect("Unable to create pipe pair");

    let data = Arc::new(Mutex::new(ChildData {
        proc: None,
        input: input
    }));

    join!(Compat::new(timer_loop(&cli, data.clone())), Compat::new(read_write_loop(&cli, data, output)));
}
